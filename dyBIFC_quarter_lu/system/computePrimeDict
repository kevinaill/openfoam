    computePrime
    {
        functionObjectLibs ( "libutilityFunctionObjects.so" );
        enabled         true;
        type            coded;
        redirectType    computePrime;
        //writeControl    writeTime;
        //writeControl    timeStep;
        //writeInterval   1;
        //outputControl   timeStep;
        //outputInterval  5;

        codeOptions
        #{
            -I$(LIB_SRC)/meshTools/lnInclude
        #};

        code
        #{
	    const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const volVectorField& UMean = mesh().lookupObject<volVectorField>("UMean");
	    const volScalarField& p = mesh().lookupObject<volScalarField>("p");
	    const volScalarField& pMean = mesh().lookupObject<volScalarField>("pMean");
            static autoPtr<volVectorField> vField;
            static autoPtr<volScalarField> sField;

	    if(!vField.valid())
	    {
//     	        Info << "Computing UPrime" << nl;

	        vField.set
      		(
         	    new volVectorField
         	    (
            		IOobject
            		(
               		    "UPrime",
               		    mesh().time().timeName(),
               		    U.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
            		U-UMean
         	    )
      		);
	    }

	    if(!sField.valid())
	    {
//     	        Info << "Computing pPrime" << nl;

	        sField.set
      		(
         	    new volScalarField
         	    (
            		IOobject
            		(
               		    "pPrime",
               		    mesh().time().timeName(),
               		    U.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
            		p-pMean
         	    )
      		);
   	    }
	    
	    volVectorField &UPrime = vField();
	    UPrime.checkIn();
	    UPrime = U - UMean;
	    Info << " max UPrime " << max(UPrime) << nl;

	    volScalarField &pPrime = sField();
	    pPrime.checkIn();
	    pPrime = p - pMean;
//	    Info << " max pPrime " << max(pPrime) << nl;
       #};
    }
