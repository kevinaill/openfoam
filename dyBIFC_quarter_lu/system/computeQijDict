computeQij
{
        functionObjectLibs ( "libutilityFunctionObjects.so" );
        enabled         true;
        type            coded;
        redirectType    computeQij;
 //       writeControl    writeTime; //timeStep;
//        writeInterval   100;
        outputControl   outputTime;


        codeOptions
        #{
            -I$(LIB_SRC)/meshTools/lnInclude
        #};

        code
        #{
	    const volVectorField& UPrime = mesh().lookupObject<volVectorField>("UPrime");
	    const volScalarField& pPrime = mesh().lookupObject<volScalarField>("pPrime");
            const volTensorField& GradUPrime = mesh().lookupObject<volTensorField>("GradUPrime");
	    volScalarField GP_uu("GP_uu", GradUPrime.component(tensor::XX));
	    volScalarField GP_vu("GP_vu", GradUPrime.component(tensor::YX));
	    volScalarField GP_uv("GP_uv", GradUPrime.component(tensor::XY));
	    volScalarField GP_vv("GP_vv", GradUPrime.component(tensor::YY));
	    volScalarField GP_ww("GP_ww", GradUPrime.component(tensor::ZZ));
	    static autoPtr<volScalarField> sField;
	    static autoPtr<volScalarField> ssField;
	    static autoPtr<volScalarField> sssField;
	    static autoPtr<volScalarField> ssssField;
	    

	    if(!sField.valid())
	    {
	        sField.set
      	        (
                    new volScalarField
                    (
            		IOobject
            		(
               		    "Quu",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
	                2 * pPrime * GP_uu
                    )
      	        );
	    }

	    if(!ssField.valid())
	    {
		ssField.set
      		(
         	    new volScalarField
         	    (
            		IOobject
            		(
               		    "Qvv",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
	                2 * pPrime * GP_vv
         	    )
      		);
	    }

	    if(!sssField.valid())
	    {
		sssField.set
      		(
         	    new volScalarField
         	    (
            		IOobject
            		(
               		    "Qww",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
	                2 * pPrime * GP_ww
         	    )
      		);
	    }

	    if(!ssssField.valid())
	    {
	        ssssField.set
      	        (
         	    new volScalarField
                    (
            		IOobject
            		(
               		    "Quv",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    //IOobject::NO_WRITE
               		    IOobject::AUTO_WRITE
            		),
	               pPrime * (GP_vu + GP_uv)
                    )
      	        );
	    }

	    // pressureâ€“strain

	    volScalarField &Quu = sField();
	    Quu.checkIn();
	    Quu =  2 * pPrime * GP_uu;

	    volScalarField &Qvv = ssField();
	    Qvv.checkIn();
	    Qvv = 2 * pPrime * GP_vv;

	   volScalarField &Qww = sssField();
	   Qww.checkIn();
	   Qww = 2 * pPrime * GP_ww;

	   volScalarField &Quv = ssssField();
	   Quv.checkIn();
	   Quv = pPrime * (GP_vu + GP_uv);

	#};
}
