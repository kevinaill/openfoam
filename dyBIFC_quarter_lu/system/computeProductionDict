    computeProduction
    {
        functionObjectLibs ( "libutilityFunctionObjects.so" );
        enabled         true;
        type            coded;
        redirectType    computeProduction;
        //writeControl    writeTime;
        //outputControl   timeStep;
        //outputInterval  5;
        outputControl   outputTime;

        codeOptions
        #{
            -I$(LIB_SRC)/meshTools/lnInclude
        #};

        code
        #{
	    const volSymmTensorField& UPrime2Mean = mesh().lookupObject<volSymmTensorField>("UPrime2Mean");
            const volVectorField& UMean = mesh().lookupObject<volVectorField>("UMean");
	    static autoPtr<volScalarField> sField;
	    
	    if(!sField.valid())
	    {
	        sField.set
      		(
         	    new volScalarField
         	    (
            		IOobject
            		(
               		    "kProd",
               		    mesh().time().timeName(),
               		    UMean.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
	    		-1 * (UPrime2Mean && fvc::grad(UMean))
            		//fvc::div(UMean) * dimensionedScalar("tmp", dimensionSet(0, 2, -2, 0, 0, 0, 0), 1)
         	    )
      		);
	    }

	    volScalarField &kProd = sField();
	    kProd.checkIn();
	    kProd = -1 * (UPrime2Mean && fvc::grad(UMean));
	#};
    }
