computeTij
{
        functionObjectLibs ( "libutilityFunctionObjects.so" );
        enabled         true;
        type            coded;
        redirectType    computeTij;
 //       writeControl    writeTime; //timeStep;
//        writeInterval   100;
        outputControl   outputTime;


        codeOptions
        #{
            -I$(LIB_SRC)/meshTools/lnInclude
        #};

        code
        #{
	    const volVectorField& UPrime = mesh().lookupObject<volVectorField>("UPrime");
	    const volVectorField& GradT1 = mesh().lookupObject<volVectorField>("GradT1");
	    const volVectorField& GradT2 = mesh().lookupObject<volVectorField>("GradT2");
	    const volVectorField& GradT3 = mesh().lookupObject<volVectorField>("GradT3");
	    const volVectorField& GradT4 = mesh().lookupObject<volVectorField>("GradT4");
	    const volVectorField& GradT5 = mesh().lookupObject<volVectorField>("GradT5");
	    const volVectorField& GradT6 = mesh().lookupObject<volVectorField>("GradT6");
	    const volVectorField& GradT7 = mesh().lookupObject<volVectorField>("GradT7");
	    const volVectorField& GradT8 = mesh().lookupObject<volVectorField>("GradT8");
	    const volVectorField& GradT9 = mesh().lookupObject<volVectorField>("GradT9");
	    const volVectorField& GradT10 = mesh().lookupObject<volVectorField>("GradT10");
	    volScalarField GT1X("GT1X", GradT1.component(vector::X));
	    volScalarField GT2X("GT2X", GradT2.component(vector::X));
	    volScalarField GT2Y("GT2Y", GradT2.component(vector::Y));
	    volScalarField GT3Z("GT3Z", GradT3.component(vector::Z));
	    volScalarField GT4X("GT4X", GradT4.component(vector::X));
	    volScalarField GT4Y("GT4Y", GradT4.component(vector::Y));
	    volScalarField GT5Y("GT5Y", GradT5.component(vector::Y));
	    volScalarField GT6Z("GT6Z", GradT6.component(vector::Z));
	    volScalarField GT7X("GT7X", GradT7.component(vector::X));
	    volScalarField GT8Y("GT8Y", GradT8.component(vector::Y));
	    volScalarField GT9Z("GT9Z", GradT9.component(vector::Z));
	    volScalarField GT10Z("GT10Z", GradT10.component(vector::Z));
	    static autoPtr<volScalarField> sField;
	    static autoPtr<volScalarField> ssField;
	    static autoPtr<volScalarField> sssField;
	    static autoPtr<volScalarField> ssssField;
	    

	    if(!sField.valid())
	    {
	        sField.set
      	        (
                    new volScalarField
                    (
            		IOobject
            		(
               		    "Tuu",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
	                -1 * (GT1X + GT2Y + GT3Z)
                    )
      	        );
	    }

	    if(!ssField.valid())
	    {
		ssField.set
      		(
         	    new volScalarField
         	    (
            		IOobject
            		(
               		    "Tvv",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
	                -1 * (GT4X + GT5Y + GT6Z)
         	    )
      		);
	    }

	    if(!sssField.valid())
	    {
		sssField.set
      		(
         	    new volScalarField
         	    (
            		IOobject
            		(
               		    "Tww",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
	                -1 * (GT7X + GT8Y + GT9Z)
         	    )
      		);
	    }

	    if(!ssssField.valid())
	    {
	        ssssField.set
      	        (
         	    new volScalarField
                    (
            		IOobject
            		(
               		    "Tuv",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    //IOobject::NO_WRITE
               		    IOobject::AUTO_WRITE
            		),
	                -1 * (GT2X + GT4Y + GT10Z)
                    )
      	        );
	    }

	    // turbulent transport

	    volScalarField &Tuu = sField();
	    Tuu.checkIn();
	    Tuu =  -1 * (GT1X + GT2Y + GT3Z);

	    volScalarField &Tvv = ssField();
	    Tvv.checkIn();
	    Tvv = -1 * (GT4X + GT5Y + GT6Z);

	   volScalarField &Tww = sssField();
	   Tww.checkIn();
	   Tww = -1 * (GT7X + GT8Y + GT9Z);

	   volScalarField &Tuv = ssssField();
	   Tuv.checkIn();
	   Tuv = -1 * (GT2X + GT4Y + GT10Z);

	#};
}
