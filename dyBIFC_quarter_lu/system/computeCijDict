computeCij
{
        functionObjectLibs ( "libutilityFunctionObjects.so" );
        enabled         true;
        type            coded;
        redirectType    computeCij;
 //       writeControl    writeTime; //timeStep;
//        writeInterval   100;
        outputControl   outputTime;


        codeOptions
        #{
            -I$(LIB_SRC)/meshTools/lnInclude
        #};

        code
        #{
	    const volVectorField& UPrime = mesh().lookupObject<volVectorField>("UPrime");
	    const volSymmTensorField& UPrime2Mean = mesh().lookupObject<volSymmTensorField>("UPrime2Mean");
	    volScalarField R_uu("R_uu", UPrime2Mean.component(symmTensor::XX));
	    volScalarField R_uv("R_uv", UPrime2Mean.component(symmTensor::XY));
	    volScalarField R_vv("R_vv", UPrime2Mean.component(symmTensor::YY));
	    static autoPtr<volScalarField> sField;
	    static autoPtr<volScalarField> ssField;
	    static autoPtr<volScalarField> sssField;
	    static autoPtr<volScalarField> ssssField;
	    

	    if(!sField.valid())
	    {
	        sField.set
      	        (
                    new volScalarField
                    (
            		IOobject
            		(
               		    "Cuu",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
	                4 * R_uv
                    )
      	        );
	    }

	    if(!ssField.valid())
	    {
		ssField.set
      		(
         	    new volScalarField
         	    (
            		IOobject
            		(
               		    "Cvv",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
	                -4 * R_uv
         	    )
      		);
	    }

	    if(!sssField.valid())
	    {
		sssField.set
      		(
         	    new volScalarField
         	    (
            		IOobject
            		(
               		    "Cww",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    IOobject::AUTO_WRITE
            		),
	                0 * R_uv
         	    )
      		);
	    }

	    if(!ssssField.valid())
	    {
	        ssssField.set
      	        (
         	    new volScalarField
                    (
            		IOobject
            		(
               		    "Cuv",
               		    mesh().time().timeName(),
               		    UPrime.mesh(),
               		    IOobject::NO_READ,
               		    //IOobject::NO_WRITE
               		    IOobject::AUTO_WRITE
            		),
	                -2 * (R_uu - R_vv)
                    )
      	        );
	    }

	    // Rotation terms/omega

	    volScalarField &Cuu = sField();
	    Cuu.checkIn();
	    Cuu =  4 * R_uv;

	    volScalarField &Cvv = ssField();
	    Cvv.checkIn();
	    Cvv = -4 * R_uv;

	   volScalarField &Cww = sssField();
	   Cww.checkIn();
	   Cww = 0 * R_uv;

	   volScalarField &Cuv = ssssField();
	   Cuv.checkIn();
	   Cuv = -2 * (R_uu - R_vv);

	#};
}
